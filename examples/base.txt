package demo

import "C"
import (
	"fmt"
	"github.com/gin-contrib/multitemplate"
	"github.com/gin-gonic/gin"
	"html/template"
	"log"
	"net/http"
	"os"
	"path/filepath"
)

//loadTemplates 模板继承
func loadTemplates(templatesDir string) multitemplate.Renderer {
	r := multitemplate.NewRenderer()
	layouts, err := filepath.Glob(templatesDir + "/layouts/*.html")
	if err != nil {
		panic(err.Error())
	}
	includes, err := filepath.Glob(templatesDir + "/includes/*.html")
	if err != nil {
		panic(err.Error())
	}
	for _, include := range includes {
		layouCopy := make([]string, len(layouts))
		copy(layouCopy, layouts)
		files := append(layouCopy, include)
		r.AddFromFiles(filepath.Base(include), files...)
	}
	return r
}

//getCurrentOath 获取当前执行程序的路径。
func getCurrentOath() string {
	if ex, err := os.Executable(); err == nil {
		return filepath.Dir(ex)
	}
	return "./"
}

func main2() {
	// 默认路由引擎
	r := gin.Default()

	// 自定义模板函数
	r.SetFuncMap(template.FuncMap{
		"safe": func(str string) template.HTML {
			return template.HTML(str)
		},
	})

	// 定义 templatesDir
	r.HTMLRender = loadTemplates("./templates")

	//静态文件处理
	r.Static("/static", "templates/static")
	// 模板渲染
	r.LoadHTMLGlob("templates/**/*")

	// restful 风格
	r.GET("/book", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"method": "GET",
		})
	})

	r.POST("/book", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{
			"method": "POST",
		})
	})

	r.PUT("/book", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"method": "put",
		})
	})

	r.DELETE("/book", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"method": "delete",
		})
	})

	// 渲染指定模板
	r.GET("/index", func(c *gin.Context) {
		c.HTML(200, "index/index.html", gin.H{
			"title": "index/index.html",
		})
	})

	r.GET("/user", func(c *gin.Context) {
		c.HTML(200, "user/index.html", gin.H{
			"user": "user/index.html",
		})
	})

	// 自定义模板函数  模板函数定义 需要位于 HTML模板渲染 LoadHTMLGlob || LoadHTMLFiles 之前
	r.GET("/safe", func(c *gin.Context) {
		c.HTML(200, "safe/index.html", "<a href='https://baidu.com'>百度</a>")
	})

	// 使用静态文件
	r.GET("/style", func(c *gin.Context) {
		c.HTML(200, "style/index.html", "")
	})

	// 模板继承 github.com/gin-contrib/multitemplate
	r.GET("/includesh", func(c *gin.Context) {
		c.HTML(200, "inc/home", "")
	})

	r.GET("/includesi", func(c *gin.Context) {
		c.HTML(200, "inc/index", "")
	})

	// 使用结构体（struct）渲染json
	r.GET("/moreJson", func(c *gin.Context) {
		var msg struct {
			Name    string `json:"user"`
			Message string
			Age     int
		}
		msg.Name = "闫春浩"
		msg.Message = "HEllo ych"
		msg.Age = 22
		c.JSON(http.StatusOK, msg)
	})

	// XML 渲染
	r.GET("/someXml", func(c *gin.Context) { // 自己拼接
		c.XML(http.StatusOK, gin.H{
			"message": "hello ych",
		})
	})

	// 使用结构体（struct）渲染 XML --- 要使用具名的结构体类型。
	r.GET("/moreXml", func(c *gin.Context) {
		type MessageRecord struct {
			Name    string
			Message string
			Age     int
		}
		var msg MessageRecord
		msg.Name = "小王子"
		msg.Message = "Hello world!"
		msg.Age = 18
		c.XML(http.StatusOK, msg)
	})

	// 获取 querystring querystring指的是URL中?后面携带的参数
	r.GET("/user/search", func(c *gin.Context) {
		username := c.DefaultQuery("username", "ych")
		address := c.Query("address")

		c.JSON(200, gin.H{
			"message":  "ok",
			"username": username,
			"address":  address,
		})
	})

	// 获取 form 参数 TODO::
	r.POST("/user/add", func(c *gin.Context) {
		username := c.DefaultPostForm("username", "ych")
		address := c.PostForm("address")
		c.JSON(200, gin.H{
			"message":  "ok",
			"username": username,
			"address":  address,
		})
	})

	// 获取path参数
	r.GET("/user/edit/:username/:address", func(c *gin.Context) {
		username := c.Param("username")
		address := c.Param("address")
		c.JSON(200, gin.H{
			"message":  "ok",
			"username": username,
			"address":  address,
		})
	})

	// 参数绑定
	type Login struct {
		User     string `form:"user" json:"user" binding:"required"`
		Password string `form:"password" json:"password" binding:"required"`
	}

	// 绑定JSON的示例
	r.POST("/loginJson", func(c *gin.Context) {
		var login Login
		if err := c.ShouldBind(&login); err == nil {
			fmt.Printf("login info:%v\n", login)
			c.JSON(200, gin.H{
				"user":     login.User,
				"password": login.Password,
			})
		} else {
			c.JSON(http.StatusBadRequest, gin.H{
				"error": err.Error(),
			})
		}
	})

	// 绑定form表单示例
	r.POST("/loginForm", func(c *gin.Context) {
		var login Login
		// ShouldBind()会根据请求的Content-Type自行选择绑定器
		if err := c.ShouldBind(&login); err == nil {
			c.JSON(http.StatusOK, gin.H{
				"user":     login.User,
				"password": login.Password,
			})
		} else {
			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		}
	})

	// 绑定 	QueryString示例
	r.GET("/loginquery", func(c *gin.Context) {
		var login Login
		if err := c.ShouldBind(&login); err == nil {
			c.JSON(http.StatusOK, gin.H{
				"user":     login.User,
				"password": login.Password,
			})
		} else {
			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		}
	})

	// 单文件上传
	r.GET("/uploader", func(c *gin.Context) {
		c.HTML(200, "uploader", "")
	})

	// 处理multipart forms提交文件时默认的内存限制是32 MiB
	// 可以通过下面的方式修改
	// r.MaxMultipartMemory = 8 << 20  // 8 MiB

	r.POST("/upload", func(c *gin.Context) {
		file, err := c.FormFile("f1")
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{
				"message": err.Error(),
			})
			return
		}
		log.Println(file.Filename)
		dst := fmt.Sprintf("./uploads/%s", file.Filename)
		// 上传文件到指定的目录
		c.SaveUploadedFile(file, dst)
		c.JSON(200, gin.H{
			"message": fmt.Sprintf("'%s' uploaded", file.Filename),
		})
	})

	// 多文件上传
	r.GET("uploadser", func(c *gin.Context) {
		c.HTML(200, "uploadser", "")
	})

	r.POST("/uploads", func(c *gin.Context) {
		form, _ := c.MultipartForm()
		files := form.File["file"]

		for index, file := range files {
			log.Println(file.Filename)
			dst := fmt.Sprintf("./uploads/%d_%s", index, file.Filename)
			c.SaveUploadedFile(file, dst)
		}
		c.JSON(200, gin.H{
			"message": fmt.Sprintf("%d files uploaded!", len(files)),
		})
	})

	// http 重定向
	r.GET("/test", func(c *gin.Context) {
		c.Redirect(http.StatusMovedPermanently, "http://www.baidu.com")
	})

	// 路由重定向
	r.GET("/test2", func(c *gin.Context) {
		c.Request.URL.Path = "/test3"
		r.HandleContext(c)
	})

	r.GET("/test3", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"message": "跳转成功",
		})
	})

	// 为没有配置处理函数的路由添加处理程序  404
	r.NoRoute(func(c *gin.Context) {
		c.HTML(http.StatusNotFound, "404temp", nil)
	})

	// 路由组
	oneGroup := r.Group("/group1")
	{
		oneGroup.GET("/a", func(c *gin.Context) {
			c.JSON(200, gin.H{
				"path": "/group1/a",
			})
		})
		oneGroup.GET("/b", func(c *gin.Context) {
			c.JSON(200, gin.H{
				"path": "/group1/b",
			})
		})
		// 嵌套路由组
		xx := oneGroup.Group("/xx")
		xx.GET("/one", func(c *gin.Context) {
			c.JSON(200, gin.H{
				"path": "/group1/xx/one",
			})
		})
	}

	r.Run()
}
