package main

import (
	"github.com/gin-gonic/gin"
	"log"
	"net/http"
	"time"
)

//statsCost 统计请求耗时的中间件
func statsCost() gin.HandlerFunc {
	return func(c *gin.Context) {
		start := time.Now()
		c.Set("name", "ych") // 可以通过c.Set在请求上下文中设置值，后续的处理函数能够取到该值
		// 调用该请求的剩余处理程序
		c.Next()
		// 不调用该请求的剩余处理程序
		c.Abort()
		// 计算耗时
		cost := time.Since(start)
		log.Println(cost)

	}
}

func main() {
	// 新建一个没有任何默认中间件的路由
	r := gin.New()

	// 注册全局中间件
	r.Use(statsCost())
	r.GET("/test", func(c *gin.Context) {
		name := c.MustGet("name").(string) // 从上下文取值
		log.Println(name)
		c.JSON(http.StatusOK, gin.H{
			"message": "Hello world!",
		})
	})

	// 未某个路由单独注册
	r.GET("/test2", statsCost(), func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{
			"message": "为某个路由单独注册!",
		})
	})

	// 给路由组注册中间件
	oneGroup := r.Group("/group", statsCost())
	{
		oneGroup.GET("/one", func(c *gin.Context) {
			c.JSON(200, gin.H{
				"tips": "给路由组注册的中间件",
			})
		})
	}
	// 给路由组注册中间件 其他写法
	twoGroup := r.Group("/group2")
	twoGroup.Use(statsCost())
	{
	}

	r.Run()
}
